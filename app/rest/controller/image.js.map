{"version":3,"sources":["../../../src/rest/controller/image.js"],"names":["fs","require","path","uuid","renameAsync","think","promisify","rename","existsAsync","exists","readFileAsync","readFile","__before","modelInstance","model","getPk","modelPk","needPaging","postAction","files","extend","file","isEmpty","fail","picInfos","f","filepath","fileType","exec","originalFilename","baseName","v1","subpath","basePath","join","UPLOAD_PATH","mkdir","push","imageModel","addMany","result","success","getAction","id","console","log","getImages","images","realPath","type","end"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;;AAGA,IAAIG,cAAcC,MAAMC,SAAN,CAAgBN,GAAGO,MAAnB,EAA2BP,EAA3B,CAAlB;AACA,IAAIQ,cAAcH,MAAMC,SAAN,CAAgBN,GAAGS,MAAnB,EAA2BT,EAA3B,CAAlB;AACA,IAAIU,gBAAgBL,MAAMC,SAAN,CAAgBN,GAAGW,QAAnB,EAA6BX,EAA7B,CAApB;;;;;;;;;;AAGE;;;;mBAIMY,Q;;;;;;;AAEJ,mBAAKC,aAAL,GAAqBR,MAAMS,KAAN,CAAY,OAAZ,EAAqB,IAArB,EAA2B,KAA3B,CAArB;;qBACqB,KAAKD,aAAL,CAAmBE,KAAnB,E;;;AAArB,mBAAKC,O;;AACL,mBAAKC,UAAL,GAAkB,KAAlB;;qBACa,gBAAML,QAAN,W;;;;;;;;;;;;;;;;;;;;mBAITM,U;;;;;;;AACJ;AACIC,mB,GAAQd,MAAMe,MAAN,CAAa,EAAb,EAAiB,KAAKC,IAAL,CAAU,OAAV,CAAjB,C;;mBAERhB,MAAMiB,OAAN,CAAcH,KAAd,C;;;;;gDACK,KAAKI,IAAL,CAAU,gBAAV,C;;;;AAGT,kBAAI,CAACJ,MAAM,GAAN,CAAL,EACEA,QAAQ,EAAC,KAAKA,KAAN,EAAR;;AAEEK,sB,GAAW,E;wDAEDL,K;;;;;;;;AAALM,e;AACHJ,kB,GAAOF,MAAMM,CAAN,C;AACPC,sB,GAAWL,KAAKnB,I;AAEhByB,sB,GAAW,YAAYC,IAAZ,CAAiBP,KAAKQ,gBAAtB,C,EAAyC;AACxD;;;AAGIC,sB,GAAW3B,KAAK4B,EAAL,KAAYJ,Q;AACvBK,qB,GAAU,Q;AACVC,sB,GAAW/B,KAAKgC,IAAL,CAAU7B,MAAM8B,WAAhB,EAA6BH,OAA7B,C;;AACf3B,oBAAM+B,KAAN,CAAYH,QAAZ;;qBACM7B,YAAYsB,QAAZ,EAAsBxB,KAAKgC,IAAL,CAAUD,QAAV,EAAoBH,QAApB,CAAtB,C;;;AACNN,uBAASa,IAAT,CAAc;AACZ,8BAAchB,KAAKQ,gBADP;AAEZ,wBAAQ,YAAY,aAAZ,GAA4B,GAA5B,GAAkCG,OAAlC,GAA4C,GAA5C,GAAkDF;AAF9C,eAAd;;;;;AAMEQ,wB,GAAajC,MAAMS,KAAN,CAAY,OAAZ,EAAqB,IAArB,EAA2B,KAA3B,C;;qBACEwB,WAAWC,OAAX,CAAmBf,QAAnB,C;;;AAAfgB,oB;gDAEGnC,MAAMiB,OAAN,CAAckB,MAAd,IAAwB,KAAKjB,IAAL,CAAU,mBAAV,CAAxB,GAAyD,KAAKkB,OAAL,CAAaD,MAAb,C;;;;;;;;;;;;;;;;;mBAG5DE,S;;;;;;;kBACC,KAAKC,E;;;;;gDACD,KAAKpB,IAAL,CAAU,aAAV,C;;;AAELe,wB,GAAajC,MAAMS,KAAN,CAAY,OAAZ,EAAqB,IAArB,EAA2B,KAA3B,C;;;AAEf8B,sBAAQC,GAAR,CAAY,KAAKF,EAAjB;;qBACmBL,WAAWQ,SAAX,CAAqB,KAAKH,EAA1B,C;;;AAAfI,oB;;qBACarC,cAAcqC,OAAO,CAAP,EAAUC,QAAxB,C;;;AAAb3B,kB;;;AAEJ,mBAAK4B,IAAL,CAAU,SAAV;gDACO,KAAKC,GAAL,CAAS7B,IAAT,C;;;;;gDAEA,KAAKE,IAAL,CAAU,eAAV,C","file":"image.js","sourcesContent":["'use strict';\r\n\r\nimport Base from './base.js';\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar uuid = require(\"uuid\")\r\n\r\n\r\nlet renameAsync = think.promisify(fs.rename, fs);\r\nlet existsAsync = think.promisify(fs.exists, fs);\r\nlet readFileAsync = think.promisify(fs.readFile, fs);\r\n\r\nexport default class extends Base {\r\n  /**\r\n   * index action\r\n   * @return {Promise} []\r\n   */\r\n  async __before() {\r\n\r\n    this.modelInstance = think.model('image', null, 'api');\r\n    this.modelPk = await this.modelInstance.getPk();\r\n    this.needPaging = false;\r\n    return await super.__before();\r\n  }\r\n\r\n\r\n  async postAction() {\r\n    //这里的 key 需要和 form 表单里的 name 值保持一致\r\n    var files = think.extend({}, this.file('files'));\r\n\r\n    if (think.isEmpty(files)) {\r\n      return this.fail('NO_UPLOAD_FILE');\r\n    }\r\n\r\n    if (!files[\"0\"])\r\n      files = {'0': files};\r\n\r\n    let picInfos = [];\r\n\r\n    for (let f in files) {\r\n      let file = files[f];\r\n      let filepath = file.path;\r\n\r\n      let fileType = /\\.[^\\.]+$/.exec(file.originalFilename); // 判断后缀名\r\n      //文件上传后，需要将文件移动到项目其他地方，否则会在请求结束时删除掉该文件\r\n\r\n\r\n      let baseName = uuid.v1() + fileType;\r\n      let subpath = 'images';\r\n      let basePath = path.join(think.UPLOAD_PATH, subpath);\r\n      think.mkdir(basePath);\r\n      await renameAsync(filepath, path.join(basePath, baseName));\r\n      picInfos.push({\r\n        \"originName\": file.originalFilename,\r\n        \"path\": \"file://\" + 'UPLOAD_PATH' + '/' + subpath + '/' + baseName\r\n      });\r\n    }\r\n\r\n    let imageModel = think.model(\"image\", null, 'api');\r\n    let result = await imageModel.addMany(picInfos);\r\n\r\n    return think.isEmpty(result) ? this.fail(\"Failed to upload!\") : this.success(result);\r\n  }\r\n\r\n  async getAction() {\r\n    if (!this.id) {\r\n      return this.fail('NO_IMAGE_ID');\r\n    }\r\n    let imageModel = think.model('image', null, 'api');\r\n    try {\r\n      console.log(this.id);\r\n      let images = await imageModel.getImages(this.id);\r\n      let file = await readFileAsync(images[0].realPath);\r\n\r\n      this.type('image/*');\r\n      return this.end(file);\r\n    } catch (e) {\r\n      return this.fail('NO_THIS_IMAGE');\r\n    }\r\n\r\n\r\n  }\r\n}"]}