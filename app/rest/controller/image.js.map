{"version":3,"sources":["../../../src/rest/controller/image.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAGA,IAAI,cAAc,MAAM,SAAN,CAAgB,GAAG,MAAnB,EAA2B,EAA3B,CAAlB;AACA,IAAI,cAAc,MAAM,SAAN,CAAgB,GAAG,MAAnB,EAA2B,EAA3B,CAAlB;AACA,IAAI,gBAAgB,MAAM,SAAN,CAAgB,GAAG,QAAnB,EAA6B,EAA7B,CAApB;;;;;;;;;;AAGE;;;;mBAIM,Q;;;;;;;AAEJ,mBAAK,aAAL,GAAqB,MAAM,KAAN,CAAY,OAAZ,EAAqB,IAArB,EAA2B,KAA3B,CAArB;;qBACqB,KAAK,aAAL,CAAmB,KAAnB,E;;;AAArB,mBAAK,O;;AACL,mBAAK,UAAL,GAAkB,KAAlB;;qBACa,gBAAM,QAAN,W;;;;;;;;;;;;;;;;;;;;mBAIT,U;;;;;;;AACJ;AACI,mB,GAAQ,MAAM,MAAN,CAAa,EAAb,EAAiB,KAAK,IAAL,CAAU,OAAV,CAAjB,C;;mBAER,MAAM,OAAN,CAAc,KAAd,C;;;;;gDACK,KAAK,IAAL,CAAU,gBAAV,C;;;;AAGT,kBAAI,CAAC,MAAM,GAAN,CAAL,EACE,QAAQ,EAAC,KAAK,KAAN,EAAR;;AAEE,sB,GAAW,E;wDAED,K;;;;;;;;AAAL,e;AACH,kB,GAAO,MAAM,CAAN,C;AACP,sB,GAAW,KAAK,I;AAEhB,sB,GAAW,YAAY,IAAZ,CAAiB,KAAK,gBAAtB,C,EAAyC;AACxD;;;AAGI,sB,GAAW,KAAK,EAAL,KAAY,Q;AACvB,qB,GAAU,Q;AACV,sB,GAAW,KAAK,IAAL,CAAU,MAAM,WAAhB,EAA6B,OAA7B,C;;AACf,oBAAM,KAAN,CAAY,QAAZ;;qBACM,YAAY,QAAZ,EAAsB,KAAK,IAAL,CAAU,QAAV,EAAoB,QAApB,CAAtB,C;;;AACN,uBAAS,IAAT,CAAc;AACZ,8BAAc,KAAK,gBADP;AAEZ,wBAAQ,YAAY,aAAZ,GAA4B,GAA5B,GAAkC,OAAlC,GAA4C,GAA5C,GAAkD;AAF9C,eAAd;;;;;AAME,wB,GAAa,MAAM,KAAN,CAAY,OAAZ,EAAqB,IAArB,EAA2B,KAA3B,C;;qBACE,WAAW,OAAX,CAAmB,QAAnB,C;;;AAAf,oB;gDAEG,MAAM,OAAN,CAAc,MAAd,IAAwB,KAAK,IAAL,CAAU,mBAAV,CAAxB,GAAyD,KAAK,OAAL,CAAa,MAAb,C;;;;;;;;;;;;;;;;;mBAG5D,S;;;;;;;kBACC,KAAK,E;;;;;gDACD,KAAK,IAAL,CAAU,aAAV,C;;;AAEL,wB,GAAa,MAAM,KAAN,CAAY,OAAZ,EAAqB,IAArB,EAA2B,KAA3B,C;;;AAEf,sBAAQ,GAAR,CAAY,KAAK,EAAjB;;qBACmB,WAAW,SAAX,CAAqB,KAAK,EAA1B,C;;;AAAf,oB;;qBACa,cAAc,OAAO,CAAP,EAAU,QAAxB,C;;;AAAb,kB;;;AAEJ,mBAAK,IAAL,CAAU,SAAV;gDACO,KAAK,GAAL,CAAS,IAAT,C;;;;;gDAEA,KAAK,IAAL,CAAU,eAAV,C","file":"image.js","sourcesContent":["'use strict';\r\n\r\nimport Base from './base.js';\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar uuid = require(\"uuid\")\r\n\r\n\r\nlet renameAsync = think.promisify(fs.rename, fs);\r\nlet existsAsync = think.promisify(fs.exists, fs);\r\nlet readFileAsync = think.promisify(fs.readFile, fs);\r\n\r\nexport default class extends Base {\r\n  /**\r\n   * index action\r\n   * @return {Promise} []\r\n   */\r\n  async __before() {\r\n\r\n    this.modelInstance = think.model('image', null, 'api');\r\n    this.modelPk = await this.modelInstance.getPk();\r\n    this.needPaging = false;\r\n    return await super.__before();\r\n  }\r\n\r\n\r\n  async postAction() {\r\n    //这里的 key 需要和 form 表单里的 name 值保持一致\r\n    var files = think.extend({}, this.file('files'));\r\n\r\n    if (think.isEmpty(files)) {\r\n      return this.fail('NO_UPLOAD_FILE');\r\n    }\r\n\r\n    if (!files[\"0\"])\r\n      files = {'0': files};\r\n\r\n    let picInfos = [];\r\n\r\n    for (let f in files) {\r\n      let file = files[f];\r\n      let filepath = file.path;\r\n\r\n      let fileType = /\\.[^\\.]+$/.exec(file.originalFilename); // 判断后缀名\r\n      //文件上传后，需要将文件移动到项目其他地方，否则会在请求结束时删除掉该文件\r\n\r\n\r\n      let baseName = uuid.v1() + fileType;\r\n      let subpath = 'images';\r\n      let basePath = path.join(think.UPLOAD_PATH, subpath);\r\n      think.mkdir(basePath);\r\n      await renameAsync(filepath, path.join(basePath, baseName));\r\n      picInfos.push({\r\n        \"originName\": file.originalFilename,\r\n        \"path\": \"file://\" + 'UPLOAD_PATH' + '/' + subpath + '/' + baseName\r\n      });\r\n    }\r\n\r\n    let imageModel = think.model(\"image\", null, 'api');\r\n    let result = await imageModel.addMany(picInfos);\r\n\r\n    return think.isEmpty(result) ? this.fail(\"Failed to upload!\") : this.success(result);\r\n  }\r\n\r\n  async getAction() {\r\n    if (!this.id) {\r\n      return this.fail('NO_IMAGE_ID');\r\n    }\r\n    let imageModel = think.model('image', null, 'api');\r\n    try {\r\n      console.log(this.id);\r\n      let images = await imageModel.getImages(this.id);\r\n      let file = await readFileAsync(images[0].realPath);\r\n\r\n      this.type('image/*');\r\n      return this.end(file);\r\n    } catch (e) {\r\n      return this.fail('NO_THIS_IMAGE');\r\n    }\r\n\r\n\r\n  }\r\n}"]}