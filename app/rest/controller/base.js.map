{"version":3,"sources":["../../../src/rest/controller/base.js"],"names":["Base","init","args","modelInstance","modelPk","needPaging","pageCount","think","config","listOrder","filter","join","field","_method","__before","method","http","toLowerCase","_setCorsHeader","end","header","getAction","data","id","where","find","param","pageNo","isEmpty","JSON","parse","extend","t","order","page","select","success","postAction","post","fail","session","user","author","publisher","add","insertId","deleteAction","console","log","delete","rows","affectedRows","putAction","update","populate","obj","arr","model","key","i","ref","isArray","j","push","shift","helper","controller","rest"],"mappings":"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","file":"base.js","sourcesContent":["'use strict';\r\n\r\nexport default class Base extends think.controller.rest {\r\n  modelInstance;\r\n  modelPk;\r\n\r\n  needPaging;\r\n  pageCount;\r\n  listOrder;\r\n  filter;\r\n  join;\r\n  field;\r\n\r\n  init(...args) {\r\n    super.init(...args);\r\n    this.modelInstance = null;\r\n    this.modelPk = null;\r\n    this.needPaging = 1;\r\n    this.pageCount = think.config('site.defaultPageCount');\r\n    this.listOrder = {'createAt': 'desc'}\r\n    this.filter = {};\r\n    this.join = '';\r\n    this.field = '';\r\n    //允许rest API使用post访问\r\n    this._method = '_method';\r\n  }\r\n\r\n  //允许跨域访问\r\n  __before() {\r\n    let method = this.http.method.toLowerCase();\r\n    this._setCorsHeader();\r\n    if (method === \"options\") {\r\n      return this.end();\r\n    }\r\n\r\n  }\r\n\r\n  _setCorsHeader() {\r\n    this.header(\"Access-Control-Allow-Origin\", this.header(\"origin\") || \"*\");\r\n    this.header(\"Access-Control-Allow-Headers\", \"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, Set-Cookie,*\");\r\n    this.header(\"Access-Control-Request-Method\", \"GET,POST,PUT,DELETE\");\r\n    this.header(\"Access-Control-Allow-Credentials\", \"true\");\r\n  }\r\n\r\n  async getAction() {\r\n    let data;\r\n    if (this.id) {\r\n      data = await this.modelInstance\r\n        .where({[this.modelPk]: this.id})\r\n        .find();\r\n    } else {\r\n      let filter = this.filter;\r\n      let listOrder = this.param('listOrder');\r\n      let needPaging = +(this.param('needPaging') || this.needPaging);\r\n      let pageNo = +this.param('pageNo') > 0 ? +this.param('pageNo') : 1;\r\n      let pageCount = +(this.param('pageCount') || this.pageCount);\r\n\r\n\r\n      if (listOrder && !think.isEmpty(JSON.parse(listOrder))) {\r\n        listOrder = JSON.parse(listOrder);\r\n      } else {\r\n        listOrder = this.listOrder;\r\n      }\r\n\r\n      if (this.param('filter')) {\r\n        filter = think.extend(filter, JSON.parse(this.param('filter')));\r\n      }\r\n\r\n      let t = this.modelInstance;\r\n      if (this.join) {\r\n        t = t.join(this.join);\r\n      }\r\n      if (this.field) {\r\n        t = t.field(this.field);\r\n      }\r\n      t = t.where(filter)\r\n        .order(listOrder);\r\n\r\n      if (needPaging) {\r\n        t.order(listOrder).page(pageNo, pageCount)\r\n      }\r\n      data = await t.select();\r\n    }\r\n    return this.success(data);\r\n\r\n  }\r\n\r\n  async postAction() {\r\n\r\n    let data = this.post();\r\n    delete data[this.modelPk];\r\n    if (think.isEmpty(data)) {\r\n      return this.fail(\"data is empty\");\r\n    }\r\n    let user = await this.session('user');\r\n    if (!think.isEmpty(user)) {\r\n      data.user = user.id;\r\n      data.author = user.id;\r\n      data.publisher = user.id;\r\n    }\r\n\r\n    let insertId = await this.modelInstance.add(data);\r\n    return this.success({id: insertId});\r\n  }\r\n\r\n  async deleteAction() {\r\n\r\n    if (!this.id) {\r\n      return this.fail(\"params error\");\r\n    }\r\n    console.log(this.modelPk, ' delete');\r\n    let rows = await this.modelInstance.where({[this.modelPk]: this.id}).delete();\r\n    return this.success({affectedRows: rows});\r\n  }\r\n\r\n  async putAction() {\r\n\r\n    if (!this.id) {\r\n      return this.fail(\"params error\");\r\n    }\r\n    let data = this.post();\r\n    delete data[this.modelPk];\r\n    if (think.isEmpty(data)) {\r\n      return this.fail(\"data is empty\");\r\n    }\r\n    let rows = await this.modelInstance.where({[this.modelPk]: this.id}).update(data);\r\n    return this.success({affectedRows: rows});\r\n  }\r\n\r\n  /**\r\n   * @param obj the base object\r\n   * @param arr array of Object which desc popular key and collection name. for example:{key:'author',ref:'users'}\r\n   *\r\n   */\r\n  async populate(obj, arr) {\r\n    let model;\r\n    let key;\r\n    for (let i of arr) {\r\n      model = this.model(i.ref);\r\n      key = i.key;\r\n      if (think.isArray(obj[key])) {\r\n        for (let j of obj[key]) {\r\n          obj[key].push(await model.where({'_id': j + ''}).find());\r\n          obj[key].shift();\r\n        }\r\n      } else {\r\n        obj[key] = await model.where({'_id': obj[key] + ''}).find();\r\n      }\r\n\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  async helper() {\r\n\r\n  }\r\n}"]}