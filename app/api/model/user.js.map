{"version":3,"sources":["../../../src/api/model/user.js"],"names":["User","systemUser","createUser","username","password","email","role","think","model","get","creditLines","desc","level","lastLogin","Date","where","select","result","isEmpty","add","id","find","checkUser","update","delUser","delete","getUserRole","user","console","log","roleModel","name","getUserAuthorities","getRoleAuthorities","getTotalVolume","userId","orderModel","count","getTotalTurnover","itemModel","field","itemIds","itemIdArray","map","i","sum"],"mappings":"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","file":"user.js","sourcesContent":["/**\r\n * Created by zl on 2015/12/30.\r\n */\r\nimport Base from './base.js'\r\n\r\n\r\n/**\r\n * 成功时返回true或者具体对象\r\n * 失败时返回失败字符串,具体请参看 /src/common/config/local/en.js\r\n * 如果没有当前需要的失败字符串,请在该文件中定义\r\n */\r\nexport default class User extends Base {\r\n\r\n  systemUser = 1;\r\n  /**\r\n   *\r\n   * @param username\r\n   * @param password\r\n   * @param email\r\n   * @param role\r\n   * @returns {*} user object if success, otherwise err string\r\n   */\r\n  async createUser(username, password, email, role = 2 /* 'registered'*/) {\r\n    let creditLines = await think.model('config', null, 'api').get('user.default.creditLines');\r\n    let desc = await think.model('config', null, 'api').get('user.default.desc');\r\n    let level = await think.model('config', null, 'api').get('user.default.level');\r\n    let lastLogin = +new Date();\r\n\r\n    let result = await this.where({username}).select();\r\n    if (!think.isEmpty(result)) {\r\n      return 'USER_ALREADY_EXIST';\r\n    }\r\n    result = await this.where({email}).select();\r\n    if (!think.isEmpty(result)) {\r\n      return 'EMAIL_ALREADY_USED';\r\n    }\r\n    result = await this.add({username, password, email, role, creditLines, desc, level, lastLogin});\r\n\r\n    return this.where({id: result}).find();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @param password\r\n   * @returns {*} user object if success, otherwise err string\r\n   */\r\n  async checkUser(username, password) {\r\n    let result = await this.where({username}).find();\r\n    if (think.isEmpty(result)) {\r\n      return 'NO_THIS_USER';\r\n    }\r\n    if (result.password != password) {\r\n      return 'PASSWORD_WORRY';\r\n    }\r\n\r\n    //update last login\r\n    await this.where({id: result.id}).update({lastLogin: +new Date()});\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @returns {Promise}\r\n   */\r\n  delUser(username) {\r\n    return this.where({username}).delete();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @returns {Promise<Role>}\r\n   */\r\n  async getUserRole(username) {\r\n    let user = await this.where({username}).find();\r\n    console.log(user);\r\n    let roleModel = think.model('role', null, 'api');\r\n    return roleModel.where({name: user.role}).find();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @returns {Promise<[Authority]>}\r\n   */\r\n  async getUserAuthorities(username) {\r\n    let roleModel = think.model('role', null, 'api');\r\n    let user = await this.where({username}).find();\r\n    let role = await roleModel.where({id: user.role}).find();\r\n    // console.log(role);\r\n    return roleModel.getRoleAuthorities(role.name);\r\n  }\r\n\r\n  getTotalVolume(userId) {\r\n    let orderModel = think.model(\"order\", null, \"api\");\r\n    return orderModel.where({user: userId}).count();\r\n  }\r\n\r\n  async getTotalTurnover(userId) {\r\n    let orderModel = think.model(\"order\", null, \"api\");\r\n    let itemModel = think.model(\"item\", null, \"api\");\r\n    let itemIds = await orderModel.field(\"item\").where({user: userId}).select();\r\n    if (think.isEmpty(itemIds))\r\n      return 0;\r\n    let itemIdArray = itemIds.map((i)=>i[\"item\"]);\r\n    return itemModel.where({id: [\"IN\", itemIdArray]}).sum(\"currentPrice\");\r\n  }\r\n}"]}