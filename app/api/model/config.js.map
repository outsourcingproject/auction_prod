{"version":3,"sources":["../../../src/api/model/config.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IACqB,M;;;;;;;;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;mBAKM,G;2FAAI,G;;;;;;;qBACW,KAAK,YAAL,E;;;AAAf,oB;;oBACA,OAAO,GAAP,IAAc,W;;;;;+CACT,M;;;AACL,kB,GAAO,IAAI,KAAJ,CAAU,GAAV,C;;AACP,uB,GAAY,SAAZ,SAAY,CAAC,IAAD,EAAO,GAAP,EAAc;AAC5B,oBAAI,KAAK,MAAL,IAAe,CAAnB,EAAsB;AACpB,sBAAI,OAAM,KAAK,CAAL,CAAV;AACA,sBAAI,OAAO,IAAI,IAAJ,CAAP,IAAmB,WAAvB,EAAoC;AAClC,2BAAO,IAAI,IAAJ,CAAP;AACD;AACD,uBAAK,KAAL;AACA,yBAAO,UAAU,IAAV,EAAgB,IAAI,IAAJ,CAAhB,CAAP;AAED;AACD,uBAAO,GAAP;AACD,e;;+CACM,UAAU,IAAV,EAAgB,MAAhB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;mBAMM,G;6FAAI,G,EAAK,G;;;;;;;;;kBACR,G;;;;;;;;AAGD,oB;;oBACA,QAAO,GAAP,uDAAO,GAAP,MAAc,Q;;;;;AAChB,uBAAS,yBAAe,GAAf,CAAT;;qBACM,KAAK,IAAL,CAAU,MAAV,C;;;gDACC,M;;;;;;;;;;+BAEQ,OAAK,YAAL,E;;;AAAf,8B;AACI,4B,GAAO,IAAI,KAAJ,CAAU,GAAV,C;;AAEP,iC,GAAY,SAAZ,SAAY,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAmB;AACjC,8BAAI,KAAK,MAAL,IAAe,CAAnB,EACE;;AAEF,8BAAI,MAAM,KAAK,CAAL,CAAV;AACA,8BAAI,KAAK,MAAL,IAAe,CAAnB,EAAsB;AACpB,gCAAI,UAAS,IAAI,GAAJ,CAAb;AACA,gCAAI,GAAJ,IAAW,GAAX;AACA,mCAAO,OAAP;AACD,2BAJD,MAIO;AACL,gCAAI,sBAAO,IAAI,GAAJ,CAAP,KAAmB,QAAvB,EAAiC;AAC/B,kCAAI,GAAJ,IAAW,EAAX;AACD;AACD,iCAAK,KAAL;AACA,mCAAO,UAAU,IAAV,EAAgB,GAAhB,EAAqB,IAAI,GAAJ,CAArB,CAAP;AACD;AACF,yB;;AACG,8B,GAAS,UAAU,IAAV,EAAgB,GAAhB,EAAqB,MAArB,C;;AACb,iCAAO,yBAAe,MAAf,CAAP;;+BACM,OAAK,KAAL,CAAW,EAAC,IAAG,EAAC,KAAI,CAAL,EAAJ,EAAX,EAAyB,MAAzB,CAAgC,EAAC,cAAD,EAAhC,C;;;;6BAEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIX;;;;;;mBAIA,Y,2BAAe;AACb,WAAO,KAAK,MAAL,EAAP;AACD,G;;AAED;;;;;;;mBAKM,Y;;;;;;;;qBACe,KAAK,MAAL,E;;;AAAf,oB;AAEA,2B,GAAgB,yBAAe,MAAM,MAAN,CAAa,MAAb,CAAf,C;;oBAChB,OAAO,MAAP,IAAiB,C;;;;;;qBACb,KAAK,MAAL,E;;;;qBACA,KAAK,GAAL,CAAS,EAAC,QAAQ,aAAT,EAAT,C;;;gDACC,KAAK,KAAL,CAAW,aAAX,C;;;gDAEF,KAAK,KAAL,CAAW,OAAO,CAAP,EAAU,MAArB,C;;;;;;;;;;;;;;;;;;;;kBA9GU,M","file":"config.js","sourcesContent":["import Base from './base.js'\r\nexport default class config extends Base {\r\n  // schemas = {\r\n  //   config: {\r\n  //     type:Object,\r\n  //     required: true,\r\n  //     default: ()=>think.config('site')\r\n  //   },\r\n  //   createAt: {\r\n  //     type:Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   },\r\n  //   updateAt: {\r\n  //     type:Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   }\r\n  // };\r\n\r\n  /**\r\n   *\r\n   * @param key {String} the path of config, e.g. 'foo.bar' will get config.foo.bar\r\n   * @returns {*} val\r\n   */\r\n  async get(key) {\r\n    let config = await this._getDBConfig();\r\n    if (typeof key == 'undefined')\r\n      return config;\r\n    let keys = key.split('.');\r\n    let objectGet = (keys, obj)=> {\r\n      if (keys.length != 0) {\r\n        let key = keys[0];\r\n        if (typeof obj[key] == 'undefined') {\r\n          return obj[key];\r\n        }\r\n        keys.shift();\r\n        return objectGet(keys, obj[key]);\r\n\r\n      }\r\n      return obj;\r\n    };\r\n    return objectGet(keys, config);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param key {String} the path of config, e.g. 'foo.bar' indicates config.foo.bar\r\n   * @param val {*} value of setting\r\n   * @returns {*} old value\r\n   */\r\n  async set(key, val) {\r\n    if (!key) {\r\n      return;\r\n    }\r\n    let config;\r\n    if (typeof key == 'object') {\r\n      config = JSON.stringify(key);\r\n      await this.save(config);\r\n      return config;\r\n    } else {\r\n      config = await this._getDBConfig();\r\n      let keys = key.split('.');\r\n\r\n      let objectSet = (keys, val, obj)=> {\r\n        if (keys.length == 0)\r\n          return;\r\n\r\n        let key = keys[0];\r\n        if (keys.length == 1) {\r\n          let oldVal = obj[key];\r\n          obj[key] = val;\r\n          return oldVal;\r\n        } else {\r\n          if (typeof obj[key] != 'object') {\r\n            obj[key] = {};\r\n          }\r\n          keys.shift();\r\n          return objectSet(keys, val, obj[key]);\r\n        }\r\n      };\r\n      let oldVal = objectSet(keys, val, config);\r\n      config=JSON.stringify(config);\r\n      await this.where({id:{'>':0}}).update({config});\r\n\r\n      return oldVal;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * set all config to default\r\n   * @returns {Promise}\r\n   */\r\n  setToDefault() {\r\n    return this.delete();\r\n  }\r\n\r\n  /**\r\n   * if db is empty, it will auto save default config into db, which locals in common/config/site.js\r\n   * @returns {*} config in db\r\n   * @private\r\n   */\r\n  async _getDBConfig() {\r\n    let config = await this.select();\r\n\r\n    let defaultConfig = JSON.stringify(think.config('site'));\r\n    if (config.length != 1) {\r\n      await this.delete();\r\n      await this.add({config: defaultConfig});\r\n      return JSON.parse(defaultConfig);\r\n    }\r\n    return JSON.parse(config[0].config);\r\n  }\r\n}"]}