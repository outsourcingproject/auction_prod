{"version":3,"sources":["../../../src/api/model/config.js"],"names":["config","get","key","_getDBConfig","keys","split","objectGet","obj","length","shift","set","val","save","objectSet","oldVal","where","id","update","setToDefault","delete","select","defaultConfig","think","add","JSON","parse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IACqBA,M;;;;;;;;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;mBAKMC,G;2FAAIC,G;;;;;;;qBACW,KAAKC,YAAL,E;;;AAAfH,oB;;oBACA,OAAOE,GAAP,IAAc,W;;;;;+CACTF,M;;;AACLI,kB,GAAOF,IAAIG,KAAJ,CAAU,GAAV,C;;AACPC,uB,GAAY,SAAZA,SAAY,CAACF,IAAD,EAAOG,GAAP,EAAc;AAC5B,oBAAIH,KAAKI,MAAL,IAAe,CAAnB,EAAsB;AACpB,sBAAIN,OAAME,KAAK,CAAL,CAAV;AACA,sBAAI,OAAOG,IAAIL,IAAJ,CAAP,IAAmB,WAAvB,EAAoC;AAClC,2BAAOK,IAAIL,IAAJ,CAAP;AACD;AACDE,uBAAKK,KAAL;AACA,yBAAOH,UAAUF,IAAV,EAAgBG,IAAIL,IAAJ,CAAhB,CAAP;AAED;AACD,uBAAOK,GAAP;AACD,e;;+CACMD,UAAUF,IAAV,EAAgBJ,MAAhB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;mBAMMU,G;6FAAIR,G,EAAKS,G;;;;;;;;;kBACRT,G;;;;;;;;AAGDF,oB;;oBACA,QAAOE,GAAP,uDAAOA,GAAP,MAAc,Q;;;;;AAChBF,uBAAS,yBAAeE,GAAf,CAAT;;qBACM,KAAKU,IAAL,CAAUZ,MAAV,C;;;gDACCA,M;;;;;;;;;;+BAEQ,OAAKG,YAAL,E;;;AAAfH,8B;AACII,4B,GAAOF,IAAIG,KAAJ,CAAU,GAAV,C;;AAEPQ,iC,GAAY,SAAZA,SAAY,CAACT,IAAD,EAAOO,GAAP,EAAYJ,GAAZ,EAAmB;AACjC,8BAAIH,KAAKI,MAAL,IAAe,CAAnB,EACE;;AAEF,8BAAIN,MAAME,KAAK,CAAL,CAAV;AACA,8BAAIA,KAAKI,MAAL,IAAe,CAAnB,EAAsB;AACpB,gCAAIM,UAASP,IAAIL,GAAJ,CAAb;AACAK,gCAAIL,GAAJ,IAAWS,GAAX;AACA,mCAAOG,OAAP;AACD,2BAJD,MAIO;AACL,gCAAI,sBAAOP,IAAIL,GAAJ,CAAP,KAAmB,QAAvB,EAAiC;AAC/BK,kCAAIL,GAAJ,IAAW,EAAX;AACD;AACDE,iCAAKK,KAAL;AACA,mCAAOI,UAAUT,IAAV,EAAgBO,GAAhB,EAAqBJ,IAAIL,GAAJ,CAArB,CAAP;AACD;AACF,yB;;AACGY,8B,GAASD,UAAUT,IAAV,EAAgBO,GAAhB,EAAqBX,MAArB,C;;AACbA,iCAAO,yBAAeA,MAAf,CAAP;;+BACM,OAAKe,KAAL,CAAW,EAACC,IAAG,EAAC,KAAI,CAAL,EAAJ,EAAX,EAAyBC,MAAzB,CAAgC,EAACjB,cAAD,EAAhC,C;;;;6BAECc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIX;;;;;;mBAIAI,Y,2BAAe;AACb,WAAO,KAAKC,MAAL,EAAP;AACD,G;;AAED;;;;;;;mBAKMhB,Y;;;;;;;;qBACe,KAAKiB,MAAL,E;;;AAAfpB,oB;AAEAqB,2B,GAAgB,yBAAeC,MAAMtB,MAAN,CAAa,MAAb,CAAf,C;;oBAChBA,OAAOQ,MAAP,IAAiB,C;;;;;;qBACb,KAAKW,MAAL,E;;;;qBACA,KAAKI,GAAL,CAAS,EAACvB,QAAQqB,aAAT,EAAT,C;;;gDACCG,KAAKC,KAAL,CAAWJ,aAAX,C;;;gDAEFG,KAAKC,KAAL,CAAWzB,OAAO,CAAP,EAAUA,MAArB,C;;;;;;;;;;;;;;;;;;;;kBA9GUA,M","file":"config.js","sourcesContent":["import Base from './base.js'\r\nexport default class config extends Base {\r\n  // schemas = {\r\n  //   config: {\r\n  //     type:Object,\r\n  //     required: true,\r\n  //     default: ()=>think.config('site')\r\n  //   },\r\n  //   createAt: {\r\n  //     type:Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   },\r\n  //   updateAt: {\r\n  //     type:Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   }\r\n  // };\r\n\r\n  /**\r\n   *\r\n   * @param key {String} the path of config, e.g. 'foo.bar' will get config.foo.bar\r\n   * @returns {*} val\r\n   */\r\n  async get(key) {\r\n    let config = await this._getDBConfig();\r\n    if (typeof key == 'undefined')\r\n      return config;\r\n    let keys = key.split('.');\r\n    let objectGet = (keys, obj)=> {\r\n      if (keys.length != 0) {\r\n        let key = keys[0];\r\n        if (typeof obj[key] == 'undefined') {\r\n          return obj[key];\r\n        }\r\n        keys.shift();\r\n        return objectGet(keys, obj[key]);\r\n\r\n      }\r\n      return obj;\r\n    };\r\n    return objectGet(keys, config);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param key {String} the path of config, e.g. 'foo.bar' indicates config.foo.bar\r\n   * @param val {*} value of setting\r\n   * @returns {*} old value\r\n   */\r\n  async set(key, val) {\r\n    if (!key) {\r\n      return;\r\n    }\r\n    let config;\r\n    if (typeof key == 'object') {\r\n      config = JSON.stringify(key);\r\n      await this.save(config);\r\n      return config;\r\n    } else {\r\n      config = await this._getDBConfig();\r\n      let keys = key.split('.');\r\n\r\n      let objectSet = (keys, val, obj)=> {\r\n        if (keys.length == 0)\r\n          return;\r\n\r\n        let key = keys[0];\r\n        if (keys.length == 1) {\r\n          let oldVal = obj[key];\r\n          obj[key] = val;\r\n          return oldVal;\r\n        } else {\r\n          if (typeof obj[key] != 'object') {\r\n            obj[key] = {};\r\n          }\r\n          keys.shift();\r\n          return objectSet(keys, val, obj[key]);\r\n        }\r\n      };\r\n      let oldVal = objectSet(keys, val, config);\r\n      config=JSON.stringify(config);\r\n      await this.where({id:{'>':0}}).update({config});\r\n\r\n      return oldVal;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * set all config to default\r\n   * @returns {Promise}\r\n   */\r\n  setToDefault() {\r\n    return this.delete();\r\n  }\r\n\r\n  /**\r\n   * if db is empty, it will auto save default config into db, which locals in common/config/site.js\r\n   * @returns {*} config in db\r\n   * @private\r\n   */\r\n  async _getDBConfig() {\r\n    let config = await this.select();\r\n\r\n    let defaultConfig = JSON.stringify(think.config('site'));\r\n    if (config.length != 1) {\r\n      await this.delete();\r\n      await this.add({config: defaultConfig});\r\n      return JSON.parse(defaultConfig);\r\n    }\r\n    return JSON.parse(config[0].config);\r\n  }\r\n}"]}