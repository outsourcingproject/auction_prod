{"version":3,"sources":["../../../src/api/model/config.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IACqB,M;;;;;;;;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;mBAKM,G;2FAAI,G;;;;;;;qBACW,KAAK,YAAL,E;;;AAAf,oB;;oBACA,OAAO,GAAP,IAAc,W;;;;;+CACT,M;;;AACL,kB,GAAO,IAAI,KAAJ,CAAU,GAAV,C;;AACP,uB,GAAY,SAAZ,SAAY,CAAC,IAAD,EAAO,GAAP,EAAc;AAC5B,oBAAI,KAAK,MAAL,IAAe,CAAnB,EAAsB;AACpB,sBAAI,OAAM,KAAK,CAAL,CAAV;AACA,sBAAI,OAAO,IAAI,IAAJ,CAAP,IAAmB,WAAvB,EAAoC;AAClC,2BAAO,IAAI,IAAJ,CAAP;AACD;AACD,uBAAK,KAAL;AACA,yBAAO,UAAU,IAAV,EAAgB,IAAI,IAAJ,CAAhB,CAAP;AAED;AACD,uBAAO,GAAP;AACD,e;;+CACM,UAAU,IAAV,EAAgB,MAAhB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;mBAMM,G;6FAAI,G,EAAK,G;;;;;;;;;kBACR,G;;;;;;;;AAGD,oB;;oBACA,QAAO,GAAP,uDAAO,GAAP,MAAc,Q;;;;;AAChB,uBAAS,yBAAe,GAAf,CAAT;;qBACM,KAAK,IAAL,CAAU,MAAV,C;;;gDACC,M;;;;;;;;;;+BAEQ,OAAK,YAAL,E;;;AAAf,8B;AACI,4B,GAAO,IAAI,KAAJ,CAAU,GAAV,C;;AAEP,iC,GAAY,SAAZ,SAAY,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAmB;AACjC,8BAAI,KAAK,MAAL,IAAe,CAAnB,EACE;;AAEF,8BAAI,MAAM,KAAK,CAAL,CAAV;AACA,8BAAI,KAAK,MAAL,IAAe,CAAnB,EAAsB;AACpB,gCAAI,UAAS,IAAI,GAAJ,CAAb;AACA,gCAAI,GAAJ,IAAW,GAAX;AACA,mCAAO,OAAP;AACD,2BAJD,MAIO;AACL,gCAAI,sBAAO,IAAI,GAAJ,CAAP,KAAmB,QAAvB,EAAiC;AAC/B,kCAAI,GAAJ,IAAW,EAAX;AACD;AACD,iCAAK,KAAL;AACA,mCAAO,UAAU,IAAV,EAAgB,GAAhB,EAAqB,IAAI,GAAJ,CAArB,CAAP;AACD;AACF,yB;;AACG,8B,GAAS,UAAU,IAAV,EAAgB,GAAhB,EAAqB,MAArB,C;;AACb,iCAAO,yBAAe,MAAf,CAAP;;+BACM,OAAK,KAAL,CAAW,EAAC,IAAG,EAAC,KAAI,CAAL,EAAJ,EAAX,EAAyB,MAAzB,CAAgC,EAAC,cAAD,EAAhC,C;;;;6BAEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIX;;;;;;mBAIA,Y,2BAAe;AACb,WAAO,KAAK,MAAL,EAAP;AACD,G;;AAED;;;;;;;mBAKM,Y;;;;;;;;qBACe,KAAK,MAAL,E;;;AAAf,oB;AAEA,2B,GAAgB,yBAAe,MAAM,MAAN,CAAa,MAAb,CAAf,C;;oBAChB,OAAO,MAAP,IAAiB,C;;;;;;qBACb,KAAK,MAAL,E;;;;qBACA,KAAK,GAAL,CAAS,EAAC,QAAQ,aAAT,EAAT,C;;;gDACC,KAAK,KAAL,CAAW,aAAX,C;;;gDAEF,KAAK,KAAL,CAAW,OAAO,CAAP,EAAU,MAArB,C;;;;;;;;;;;;;;;;;;;;kBA9GU,M","file":"config.js","sourcesContent":["import Base from './base.js'\nexport default class config extends Base {\n  // schemas = {\n  //   config: {\n  //     type:Object,\n  //     required: true,\n  //     default: ()=>think.config('site')\n  //   },\n  //   createAt: {\n  //     type:Date,\n  //     required: true,\n  //     default: ()=>new Date()\n  //   },\n  //   updateAt: {\n  //     type:Date,\n  //     required: true,\n  //     default: ()=>new Date()\n  //   }\n  // };\n\n  /**\n   *\n   * @param key {String} the path of config, e.g. 'foo.bar' will get config.foo.bar\n   * @returns {*} val\n   */\n  async get(key) {\n    let config = await this._getDBConfig();\n    if (typeof key == 'undefined')\n      return config;\n    let keys = key.split('.');\n    let objectGet = (keys, obj)=> {\n      if (keys.length != 0) {\n        let key = keys[0];\n        if (typeof obj[key] == 'undefined') {\n          return obj[key];\n        }\n        keys.shift();\n        return objectGet(keys, obj[key]);\n\n      }\n      return obj;\n    };\n    return objectGet(keys, config);\n  }\n\n  /**\n   *\n   * @param key {String} the path of config, e.g. 'foo.bar' indicates config.foo.bar\n   * @param val {*} value of setting\n   * @returns {*} old value\n   */\n  async set(key, val) {\n    if (!key) {\n      return;\n    }\n    let config;\n    if (typeof key == 'object') {\n      config = JSON.stringify(key);\n      await this.save(config);\n      return config;\n    } else {\n      config = await this._getDBConfig();\n      let keys = key.split('.');\n\n      let objectSet = (keys, val, obj)=> {\n        if (keys.length == 0)\n          return;\n\n        let key = keys[0];\n        if (keys.length == 1) {\n          let oldVal = obj[key];\n          obj[key] = val;\n          return oldVal;\n        } else {\n          if (typeof obj[key] != 'object') {\n            obj[key] = {};\n          }\n          keys.shift();\n          return objectSet(keys, val, obj[key]);\n        }\n      };\n      let oldVal = objectSet(keys, val, config);\n      config=JSON.stringify(config);\n      await this.where({id:{'>':0}}).update({config});\n\n      return oldVal;\n    }\n  }\n\n  /**\n   * set all config to default\n   * @returns {Promise}\n   */\n  setToDefault() {\n    return this.delete();\n  }\n\n  /**\n   * if db is empty, it will auto save default config into db, which locals in common/config/site.js\n   * @returns {*} config in db\n   * @private\n   */\n  async _getDBConfig() {\n    let config = await this.select();\n\n    let defaultConfig = JSON.stringify(think.config('site'));\n    if (config.length != 1) {\n      await this.delete();\n      await this.add({config: defaultConfig});\n      return JSON.parse(defaultConfig);\n    }\n    return JSON.parse(config[0].config);\n  }\n}"]}