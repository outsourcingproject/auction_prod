{"version":3,"sources":["../../../src/api/model/role.js"],"names":["Role","addRole","name","desc","extend","authorities","roleAuthorityModel","think","model","thenAdd","result","type","addRoleAuthorities","delRole","where","delete","rmAuthorities","role","find","authority","index","indexOf","slice","update","changeName","newName","changeDesc","getRoleAuthorities","authorityModel","getAuthorities","isEmpty","JSON","parse","e","push","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,I;;;;;;;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;iBAQMC,O;2FAAQC,I;UAAMC,I,uEAAO,E;UAAIC,M,uEAAS,CAAC,WAAD,EAAc,YAAd,C;UAA6BC,W,uEAAc,E;;;;;;AAE7EC,gC,GAAmBC,MAAMC,KAAN,CAAY,gBAAZ,EAA6B,IAA7B,EAAkC,KAAlC,C;;;AAEvBJ,uBAAO,yBAAeA,MAAf,CAAP;;qBACmB,KAAKK,OAAL,CAAa,EAACP,UAAD,EAAOC,UAAP,EAAaC,cAAb,EAAb,EAAmC,EAACF,UAAD,EAAnC,C;;;AAAfQ,oB;;oBAEAA,OAAOC,IAAP,IAAe,K;;;;;;qBACXL,mBAAmBM,kBAAnB,4BAAsCV,IAAtC,SAA8CG,WAA9C,E;;;+CACC,I;;;+CAEA,oB;;;;;;;;;;;;;;;;;AAIX;;;;;;;;iBAMAQ,O,oBAAQX,I,EAAM;AACZ,WAAO,KAAKY,KAAL,CAAW,EAACZ,UAAD,EAAX,EAAmBa,MAAnB,EAAP;AACD,G;;AAGD;;;;;;;;iBAMAC,a,0BAAcd,I,EAAsB;AAAA,sCAAbG,WAAa;AAAbA,iBAAa;AAAA;;AAElC,QAAIY,OAAO,KAAKH,KAAL,CAAW,EAACZ,UAAD,EAAX,EAAmBgB,IAAnB,EAAX;AACA,yBAAsBb,WAAtB,2HAAmC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA1Bc,SAA0B;;AACjC,UAAIC,QAAQH,KAAKZ,WAAL,CAAiBgB,OAAjB,CAAyBF,SAAzB,CAAZ;AACA,UAAIC,SAAS,CAAb,EAAgB;AACdH,aAAKZ,WAAL,CAAiBiB,KAAjB,CAAuBF,KAAvB,EAA8B,CAA9B;AACD;AACF;AACD,WAAO,KAAKN,KAAL,CAAW,EAACZ,UAAD,EAAX,EAAmBqB,MAAnB,CAA0B,EAAClB,wBAAD,EAA1B,CAAP;AACD,G;;AAED;;;;;;;;iBAMAmB,U,uBAAWtB,I,EAAMuB,O,EAAS;AACxB,WAAO,KAAKX,KAAL,CAAW,EAACZ,UAAD,EAAX,EAAmBqB,MAAnB,CAA0B,EAACrB,MAAMuB,OAAP,EAA1B,CAAP;AACD,G;;AAED;;;;;;;;iBAMAC,U,uBAAWxB,I,EAAMC,I,EAAM;AACrB,WAAO,KAAKW,KAAL,CAAW,EAACZ,UAAD,EAAX,EAAmBqB,MAAnB,CAA0B,EAACpB,UAAD,EAA1B,CAAP;AACD,G;;AAED;;;;;;;iBAKMwB,kB;6FAAmBzB,I;;;;;;;;AACnB0B,4B,GAAiBrB,MAAMC,KAAN,CAAY,WAAZ,EAAyB,IAAzB,EAA+B,KAA/B,C;;AAEjBqB,4B;uFAAiB,kBAAM3B,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACF,OAAKY,KAAL,CAAW,EAACZ,UAAD,EAAX,EAAmBgB,IAAnB,EADE;;AAAA;AACfD,8BADe;;AAAA,+BAEfV,MAAMuB,OAAN,CAAcb,IAAd,CAFe;AAAA;AAAA;AAAA;;AAAA,4DAGV,EAHU;;AAAA;AAKfZ,qCALe,GAKD,EALC;AAAA,uCAML0B,KAAKC,KAAL,CAAWf,KAAKb,MAAhB,CANK;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAMV6B,2BANU;AAAA,yCAOjB5B,WAPiB;AAAA;AAAA,iCAOMwB,eAAeI,CAAf,CAPN;;AAAA;AAAA;;AAAA,uCAOLC,IAPK;;AAAA;AAAA;AAAA;;AAAA;AASf5B,4CATe,GASMC,MAAMC,KAAN,CAAY,gBAAZ,EAA8B,IAA9B,EAAoC,KAApC,CATN;AAAA,yCAUnBH,WAVmB;AAAA;AAAA,iCAUIC,mBAAmBQ,KAAnB,CAAyB,EAACG,MAAMA,KAAKkB,EAAZ,EAAzB,EAA0CjB,IAA1C,EAVJ;;AAAA;AAAA;;AAAA,uCAUPgB,IAVO;;AAAA,4DAWZ7B,WAXY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iB;;gCAAjBwB,c;;;;;gDAcGA,eAAe3B,IAAf,C;;;;;;;;;;;;;;;;;;;;kBArIUF,I","file":"role.js","sourcesContent":["import Base from './base'\r\n\r\nexport default class Role extends Base {\r\n\r\n  // schemas = {\r\n  //   name: {\r\n  //     required: true,\r\n  //     default: '',\r\n  //     unique: true\r\n  //   },\r\n  //   desc: {\r\n  //     required: true,\r\n  //     default: ''\r\n  //   },\r\n  //   //继承那些角色的权限\r\n  //   extend: {\r\n  //     //ref to collection Role.name\r\n  //     type: [String],\r\n  //     required: true,\r\n  //     default: []\r\n  //   },\r\n  //   authorities: {\r\n  //     default: [],\r\n  //     type: [ObjectID]\r\n  //   },\r\n  //   createAt: {\r\n  //     type: Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   },\r\n  //   updateAt: {\r\n  //     type: Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   }\r\n  // };\r\n\r\n  // indexeses={\r\n  //   name:{$unique: 1}\r\n  // };\r\n  \r\n  /**\r\n   *\r\n   * @param name\r\n   * @param desc\r\n   * @param extend {[String]}\r\n   * @param authorities {[String]} authority name list\r\n   * @returns {*} true if success, otherwise err string\r\n   */\r\n  async addRole(name, desc = '', extend = ['anonymous', 'registered'], authorities = []) {\r\n\r\n    let roleAuthorityModel=think.model('role_authority',null,'api');\r\n\r\n    extend=JSON.stringify(extend);\r\n    let result = await this.thenAdd({name, desc, extend}, {name});\r\n\r\n    if (result.type == 'add') {\r\n      await roleAuthorityModel.addRoleAuthorities(name,...authorities);\r\n      return true;\r\n    } else {\r\n      return 'ROLE_ALREADY_EXIST';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TODO: del other role's extend\r\n   * TODO: del user's role, if none, should assign to what\r\n   * @param name {String}\r\n   * @returns {Promise}\r\n   */\r\n  delRole(name) {\r\n    return this.where({name}).delete();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param name {String} name of role\r\n   * @param authorities {String} authorities' name\r\n   * @returns {Promise}\r\n   */\r\n  rmAuthorities(name, ...authorities) {\r\n\r\n    let role = this.where({name}).find();\r\n    for (let authority of authorities) {\r\n      let index = role.authorities.indexOf(authority);\r\n      if (index >= 0) {\r\n        role.authorities.slice(index, 1);\r\n      }\r\n    }\r\n    return this.where({name}).update({authorities});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name {String}\r\n   * @param newName {String}\r\n   * @returns {Promise}\r\n   */\r\n  changeName(name, newName) {\r\n    return this.where({name}).update({name: newName});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name {String}\r\n   * @param desc {desc}\r\n   * @returns {Promise}\r\n   */\r\n  changeDesc(name, desc) {\r\n    return this.where({name}).update({desc});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name {String} name of role\r\n   * @returns {Promise<[Authority]>} authority's array\r\n   */\r\n  async getRoleAuthorities(name) {\r\n    let authorityModel = think.model('authority', null, 'api');\r\n\r\n    let getAuthorities = async(name)=> {\r\n      let role = await this.where({name}).find();\r\n      if (think.isEmpty(role)) {\r\n        return [];\r\n      }\r\n      let authorities = [];\r\n      for (let e of JSON.parse(role.extend)) {\r\n        authorities.push(await getAuthorities(e));\r\n      }\r\n      let roleAuthorityModel = think.model('role_authority', null, 'api');\r\n      authorities.push(await roleAuthorityModel.where({role: role.id}).find());\r\n      return authorities;\r\n    };\r\n\r\n    return getAuthorities(name);\r\n  };\r\n}"]}