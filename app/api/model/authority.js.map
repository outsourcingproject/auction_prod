{"version":3,"sources":["../../../src/api/model/authority.js"],"names":["Authority","indexeses","name","$unique","addAuthority","desc","allows","thenAdd","createAt","Date","updateAt","result","type","delAuthority","where","delete"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IACqBA,S;;;;;;;;;;;;gJA8BnBC,S,GAAU;AACRC,YAAK,EAACC,SAAS,CAAV;AADG,K;;AA7BV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;;;;;;sBAOMC,Y;2FAAaF,I;UAAMG,I,uEAAO,E;UAAIC,M,uEAAS,E;;;;;;;AAE3CA,uBAAO,yBAAeA,MAAf,CAAP;;qBACmB,KAAKC,OAAL,CAAa,EAACL,UAAD,EAAOG,UAAP,EAAaC,cAAb,EAAoBE,UAAS,IAAIC,IAAJ,EAA7B,EAAwCC,UAAS,IAAID,IAAJ,EAAjD,EAAb,EAA2E,EAACP,UAAD,EAA3E,C;;;AAAfS,oB;;oBAEAA,OAAOC,IAAP,IAAe,K;;;;;+CACV,I;;;+CAEA,yB;;;;;;;;;;;;;;;;;AAIX;;;;;;;sBAKAC,Y,yBAAaX,I,EAAM;AACjB,WAAO,KAAKY,KAAL,CAAW,EAACZ,UAAD,EAAX,EAAmBa,MAAnB,EAAP;AACD,G;;;;;kBA3DkBf,S","file":"authority.js","sourcesContent":["import Base from './base.js'\r\nexport default class Authority extends Base {\r\n  // schemas = {\r\n  //   name: {\r\n  //     type: String,\r\n  //     required: true,\r\n  //     unique: true,\r\n  //     default: ''\r\n  //   },\r\n  //   desc: {\r\n  //     type: String,\r\n  //     required: true,\r\n  //     default: ''\r\n  //   },\r\n  //   paths: {\r\n  //     type: [String|RegExp],\r\n  //     required: true,\r\n  //     default: []\r\n  //   },\r\n  //   createAt: {\r\n  //     type:Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   },\r\n  //   updateAt: {\r\n  //     type:Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   }\r\n  // };\r\n\r\n  indexeses={\r\n    name:{$unique: 1}\r\n  };\r\n  /**\r\n   *\r\n   * @param name\r\n   * @param desc\r\n   * @param allows {[String|RegExp]}\r\n   * @returns {*} true if success, otherwise err string\r\n   */\r\n  async addAuthority(name, desc = '', allows = []) {\r\n\r\n    allows=JSON.stringify(allows);\r\n    let result = await this.thenAdd({name, desc, allows,createAt:new Date(),updateAt:new Date()}, {name});\r\n\r\n    if (result.type == 'add') {\r\n      return true;\r\n    } else {\r\n      return 'AUTHORITY_ALREADY_EXIST';\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name\r\n   * @returns {Promise}\r\n   */\r\n  delAuthority(name) {\r\n    return this.where({name}).delete();\r\n  }\r\n\r\n}"]}