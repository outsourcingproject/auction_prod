{"version":3,"sources":["../../../src/api/model/authority.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IACqB,S;;;;;;;;;;;;gJA8BnB,S,GAAU;AACR,YAAK,EAAC,SAAS,CAAV;AADG,K;;AA7BV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;;;;;;sBAOM,Y;2FAAa,I;UAAM,I,yDAAO,E;UAAI,M,yDAAS,E;;;;;;;AAE3C,uBAAO,yBAAe,MAAf,CAAP;;qBACmB,KAAK,OAAL,CAAa,EAAC,UAAD,EAAO,UAAP,EAAa,cAAb,EAAoB,UAAS,IAAI,IAAJ,EAA7B,EAAwC,UAAS,IAAI,IAAJ,EAAjD,EAAb,EAA2E,EAAC,UAAD,EAA3E,C;;;AAAf,oB;;oBAEA,OAAO,IAAP,IAAe,K;;;;;+CACV,I;;;+CAEA,yB;;;;;;;;;;;;;;;;;AAIX;;;;;;;sBAKA,Y,yBAAa,I,EAAM;AACjB,WAAO,KAAK,KAAL,CAAW,EAAC,UAAD,EAAX,EAAmB,MAAnB,EAAP;AACD,G;;;;;kBA3DkB,S","file":"authority.js","sourcesContent":["import Base from './base.js'\nexport default class Authority extends Base {\n  // schemas = {\n  //   name: {\n  //     type: String,\n  //     required: true,\n  //     unique: true,\n  //     default: ''\n  //   },\n  //   desc: {\n  //     type: String,\n  //     required: true,\n  //     default: ''\n  //   },\n  //   paths: {\n  //     type: [String|RegExp],\n  //     required: true,\n  //     default: []\n  //   },\n  //   createAt: {\n  //     type:Date,\n  //     required: true,\n  //     default: ()=>new Date()\n  //   },\n  //   updateAt: {\n  //     type:Date,\n  //     required: true,\n  //     default: ()=>new Date()\n  //   }\n  // };\n\n  indexeses={\n    name:{$unique: 1}\n  };\n  /**\n   *\n   * @param name\n   * @param desc\n   * @param allows {[String|RegExp]}\n   * @returns {*} true if success, otherwise err string\n   */\n  async addAuthority(name, desc = '', allows = []) {\n\n    allows=JSON.stringify(allows);\n    let result = await this.thenAdd({name, desc, allows,createAt:new Date(),updateAt:new Date()}, {name});\n\n    if (result.type == 'add') {\n      return true;\n    } else {\n      return 'AUTHORITY_ALREADY_EXIST';\n    }\n  }\n\n  /**\n   *\n   * @param name\n   * @returns {Promise}\n   */\n  delAuthority(name) {\n    return this.where({name}).delete();\n  }\n\n}"]}