{"version":3,"sources":["../../../src/api/model/authority.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IACqB,S;;;;;;;;;;;;gJA8BnB,S,GAAU;AACR,YAAK,EAAC,SAAS,CAAV;AADG,K;;AA7BV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;;;;;;sBAOM,Y;2FAAa,I;UAAM,I,yDAAO,E;UAAI,M,yDAAS,E;;;;;;;AAE3C,uBAAO,yBAAe,MAAf,CAAP;;qBACmB,KAAK,OAAL,CAAa,EAAC,UAAD,EAAO,UAAP,EAAa,cAAb,EAAoB,UAAS,IAAI,IAAJ,EAA7B,EAAwC,UAAS,IAAI,IAAJ,EAAjD,EAAb,EAA2E,EAAC,UAAD,EAA3E,C;;;AAAf,oB;;oBAEA,OAAO,IAAP,IAAe,K;;;;;+CACV,I;;;+CAEA,yB;;;;;;;;;;;;;;;;;AAIX;;;;;;;sBAKA,Y,yBAAa,I,EAAM;AACjB,WAAO,KAAK,KAAL,CAAW,EAAC,UAAD,EAAX,EAAmB,MAAnB,EAAP;AACD,G;;;;;kBA3DkB,S","file":"authority.js","sourcesContent":["import Base from './base.js'\r\nexport default class Authority extends Base {\r\n  // schemas = {\r\n  //   name: {\r\n  //     type: String,\r\n  //     required: true,\r\n  //     unique: true,\r\n  //     default: ''\r\n  //   },\r\n  //   desc: {\r\n  //     type: String,\r\n  //     required: true,\r\n  //     default: ''\r\n  //   },\r\n  //   paths: {\r\n  //     type: [String|RegExp],\r\n  //     required: true,\r\n  //     default: []\r\n  //   },\r\n  //   createAt: {\r\n  //     type:Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   },\r\n  //   updateAt: {\r\n  //     type:Date,\r\n  //     required: true,\r\n  //     default: ()=>new Date()\r\n  //   }\r\n  // };\r\n\r\n  indexeses={\r\n    name:{$unique: 1}\r\n  };\r\n  /**\r\n   *\r\n   * @param name\r\n   * @param desc\r\n   * @param allows {[String|RegExp]}\r\n   * @returns {*} true if success, otherwise err string\r\n   */\r\n  async addAuthority(name, desc = '', allows = []) {\r\n\r\n    allows=JSON.stringify(allows);\r\n    let result = await this.thenAdd({name, desc, allows,createAt:new Date(),updateAt:new Date()}, {name});\r\n\r\n    if (result.type == 'add') {\r\n      return true;\r\n    } else {\r\n      return 'AUTHORITY_ALREADY_EXIST';\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name\r\n   * @returns {Promise}\r\n   */\r\n  delAuthority(name) {\r\n    return this.where({name}).delete();\r\n  }\r\n\r\n}"]}