{"version":3,"sources":["../../../src/api/model/item.js"],"names":[],"mappings":"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","file":"item.js","sourcesContent":["import Base from './base.js'\r\n\r\nexport default class Item extends Base {\r\n\r\n  AUCTION_NOT_STARTED = 0;\r\n  AUCTIONING = 1;\r\n  AUCTION_ENDED = 2;\r\n  AUCTION_FAILED = 3; //流拍\r\n\r\n  init(...args) {\r\n    super.init(...args);\r\n    this.relation = {\r\n      item_group: {\r\n        type: think.model.BELONG_TO,\r\n        key: \"group\",\r\n        fKey: \"id\",\r\n        order: \"createAt DESC\",\r\n        relation: false\r\n      }\r\n    };\r\n  }\r\n\r\n  beforeAdd(data) {\r\n    data = super.beforeAdd(data);\r\n    data.auctionBeginTime = data.auctionBeginTime || new Date();\r\n    return data;\r\n  }\r\n\r\n  async getStage(currPrice) {\r\n    console.log(currPrice);\r\n    let configModel = think.model(\"config\", null, \"api\");\r\n    let configStage = await configModel.get(\"auction.bid_increasment\");\r\n    let res = configStage.filter((i)=>i[0] <= currPrice).sort((i, j)=>i[0] < j[0])[0][1];\r\n    return res;\r\n  }\r\n\r\n  //check and change item status\r\n  async checkStatus() {\r\n    let currentTime = new Date().getTime();\r\n    let bidModel = think.model(\"bid\",null,\"api\");\r\n    let orderModel = think.model(\"order\",null,\"api\");\r\n    let itemModel = think.model(\"item\",null,\"api\");\r\n\r\n      console.log(\"========================\")\r\n      let items_end = await this.where({\r\n        auctionEndTime: {\"<\": currentTime},\r\n        status: [\"NOTIN\", [this.AUCTION_FAILED, this.AUCTION_ENDED]]\r\n      }).select();\r\n\r\n      for(let i of items_end)\r\n      {\r\n        let boolBid = await bidModel.where({item: i[\"id\"]}).count();\r\n        if (boolBid == 0){\r\n          await this.where({id: i[\"id\"]}).update({status: this.AUCTION_FAILED});\r\n        }\r\n        else{\r\n          try{\r\n            await this.startTrans();\r\n            await orderModel.addOne(i[\"currentBidder\"],i[\"id\"]);\r\n            await this.where({id: i[\"id\"]}).update({status:this.AUCTION_ENDED});\r\n            await this.commit();\r\n          }catch(e){\r\n            await this.rollback();\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log(\"========================\")\r\n\r\n      let items_auctioning = await  itemModel.where({\r\n        auctionBeginTime: {\"<\": currentTime},\r\n        auctionEndTime: {\">\": currentTime},\r\n        status: [\"NOTIN\", [this.AUCTIONING]]\r\n      }).select();\r\n      for(let i of items_auctioning){\r\n        await itemModel.where({id: i[\"id\"]}).update({status: this.AUCTIONING})\r\n      }\r\n      return true;\r\n  }\r\n\r\n  async autoProcessItem() {  \r\n  }\r\n\r\n  getListAdmin() {\r\n    return this.order(\"item.createAt DESC\")\r\n      .select();\r\n  }\r\n}"]}