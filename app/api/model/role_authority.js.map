{"version":3,"sources":["../../../src/api/model/role_authority.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,a;;;;;;;;AACrB;;;;;;0BAMQ,kB;2FAAmB,Q;wCAAa,W;AAAA,mB;;;;;;;;;AAEhC,4B,GAAe,MAAM,KAAN,CAAY,WAAZ,EAAwB,IAAxB,EAA6B,KAA7B,C;AACf,uB,GAAU,MAAM,KAAN,CAAY,MAAZ,EAAmB,IAAnB,EAAwB,KAAxB,C;;qBAEG,UAAU,KAAV,CAAgB,EAAC,MAAK,QAAN,EAAhB,EAAiC,IAAjC,E;;;AAAb,kB;;mBAED,MAAM,OAAN,CAAc,IAAd,C;;;;;;;;0BAIY,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAN,gB;;qBACe,eAAe,KAAf,CAAqB,EAAC,MAAK,EAAN,EAArB,EAAgC,IAAhC,E;;;AAAlB,uB;;mBACD,MAAM,OAAN,CAAc,SAAd,C;;;;;;;;;qBAGG,KAAK,OAAL,CAAa,EAAC,MAAK,KAAK,EAAX,EAAc,WAAU,UAAU,EAAlC,EAAb,EAAmD,EAAC,MAAK,KAAK,EAAX,EAAc,WAAU,UAAU,EAAlC,EAAnD,C;;;;;;;;;;;;;;;;;;;;;;;;kBAvBS,a","file":"role_authority.js","sourcesContent":["import Base from './base'\n\nexport default class RoleAuthority extends Base {\n/**\n   *\n   * @param roleName {String} name of role\n   * @param authorities {ObjectID} authorities' name\n   * @returns {Promise}\n   */\n  async addRoleAuthorities(roleName, ...authorities) {\n    \n    let authorityModel=think.model('authority',null,'api');\n    let roleModel=think.model('role',null,'api');\n\n    let role = await roleModel.where({name:roleName}).find();\n\n    if(think.isEmpty(role)){\n    \treturn ;\n    }\n\n    for (let an of authorities) {\n      let authority = await authorityModel.where({name:an}).find();\n      if(think.isEmpty(authority)){\n      \tcontinue;\n      }\n      await this.thenAdd({role:role.id,authority:authority.id},{role:role.id,authority:authority.id})\n    }\n  }\n\n}"]}