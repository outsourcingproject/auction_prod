{"version":3,"sources":["../../../src/api/controller/ueditor.js"],"names":["init","args","indexAction","config","action","get","think","log","result","uploads","uploadlist","crawler","state","jsonp","base64","fieldName","pathFormat","maxSize","allowFiles","up","adapter","upload","http","getFileInfo","source","post","isArray","list","imgUrl","saveRemote","info","push","url","title","original","isEmpty","listSize","path","size","start","end","parseInt","substr","lastIndexOf","files","scanFolder","length","len","files_n","i","t","toLocaleLowerCase","includes","lenn","Math","min","f","fileList","folderList","walk","readdirSync","UPLOAD_PATH","forEach","item","tmpPath","stats","statSync","isDirectory","console"],"mappings":"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","file":"ueditor.js","sourcesContent":["'use strict';\r\n\r\nimport Base from './base.js';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nexport default class extends Base {\r\n  config;\r\n\r\n  init(...args) {\r\n    super.init(...args);\r\n  }\r\n\r\n  /**\r\n   * index action\r\n   * @return {Promise} []\r\n   */\r\n  async indexAction() {\r\n    //auto render template file index_index.html\r\n    this.config = this.config(\"ueditor\");\r\n    let action = this.get(\"action\");\r\n    think.log(action);\r\n    let result;\r\n    switch (action) {\r\n      case 'config':\r\n        result = this.config;\r\n\r\n        break;\r\n\r\n      /* 上传图片 */\r\n      case 'uploadimage':\r\n      /* 上传涂鸦 */\r\n      case 'uploadscrawl':\r\n      /* 上传视频 */\r\n      case 'uploadvideo':\r\n      /* 上传文件 */\r\n      case 'uploadfile':\r\n\r\n        result = this.uploads();\r\n        //console.log(result);\r\n        break;\r\n\r\n      /* 列出图片 */\r\n      case 'listimage':\r\n      /* 列出文件 */\r\n      case 'listfile':\r\n        result = this.uploadlist();\r\n        break;\r\n\r\n      /* 抓取远程文件 */\r\n      case 'catchimage':\r\n        result = await this.crawler();\r\n        break;\r\n\r\n      default:\r\n        result = {\r\n          state: '请求地址出错'\r\n        };\r\n\r\n        break;\r\n    }\r\n    //返回结果\r\n    this.jsonp(result);\r\n\r\n  }\r\n\r\n  uploads() {\r\n    /**\r\n     * 得到上传文件所对应的各个参数,数组结构\r\n     * obj={\r\n     *     \"state\" : \"\",          //上传状态，上传成功时必须返回\"SUCCESS\"\r\n     *     \"url\" : \"\",            //返回的地址\r\n     *     \"title\" : \"\",          //新文件名\r\n     *     \"original\" : \"\",       //原始文件名\r\n     *     \"type\" : \"\" ,           //文件类型\r\n     *     \"size\" : \"\",           //文件大小\r\n     * }\r\n     */\r\n    let action = this.get(\"action\");\r\n    let base64 = \"upload\";\r\n    let config = {};\r\n    let fieldName;\r\n\r\n    switch (action) {\r\n      case 'uploadimage':\r\n        config = {\r\n          pathFormat: this.config['imagePathFormat'],\r\n          maxSize: this.config['imageMaxSize'],\r\n          allowFiles: this.config['imageAllowFiles']\r\n        };\r\n        fieldName = this.config['imageFieldName'];\r\n        break;\r\n      case 'uploadscrawl':\r\n        config = {\r\n          \"pathFormat\": this.config['scrawlPathFormat'],\r\n          \"maxSize\": this.config['scrawlMaxSize'],\r\n          \"allowFiles\": this.config['scrawlAllowFiles'],\r\n          \"oriName\": \"scrawl.png\"\r\n        };\r\n        fieldName = this.config['scrawlFieldName'];\r\n        base64 = \"base64\";\r\n        break;\r\n      case 'uploadvideo':\r\n        config = {\r\n          \"pathFormat\": this.config['videoPathFormat'],\r\n          \"maxSize\": this.config['videoMaxSize'],\r\n          \"allowFiles\": this.config['videoAllowFiles']\r\n        };\r\n        fieldName = this.config['videoFieldName'];\r\n        break;\r\n      case 'uploadfile':\r\n      default:\r\n        config = {\r\n          \"pathFormat\": this.config['filePathFormat'],\r\n          \"maxSize\": this.config['fileMaxSize'],\r\n          \"allowFiles\": this.config['fileAllowFiles']\r\n        };\r\n        fieldName = this.config['fileFieldName'];\r\n        break;\r\n    }\r\n    //return self.uploader(fieldName, config, oriName, size, path, base64);\r\n    let up = think.adapter(\"editor\", \"ueditor\"); //加载名为 ueditor 的 editor Adapter\r\n    let upload = new up(fieldName, config, base64, this.http); //实例化 Adapter\r\n\r\n    return upload.getFileInfo();\r\n  }\r\n\r\n  //抓取远程图片\r\n  async crawler() {\r\n    /* 上传配置 */\r\n    let config = {\r\n      \"pathFormat\": this.config['catcherPathFormat'],\r\n      \"maxSize\": this.config['catcherMaxSize'],\r\n      \"allowFiles\": this.config['catcherAllowFiles'],\r\n      \"oriName\": \"remote.png\"\r\n    };\r\n    let fieldName = this.config['catcherFieldName'];\r\n    let source = this.post(fieldName + \"[]\");\r\n    if (think.isArray(source)) {\r\n      source = source;\r\n    } else {\r\n      source = [source];\r\n    }\r\n    let list = [];\r\n    for (let imgUrl of source) {\r\n      let up = think.adapter(\"editor\", \"ueditor\"); //加载名为 ueditor 的 editor Adapter\r\n      let upload = new up(imgUrl, config, \"remote\"); //实例化 Adapter\r\n      let info = await upload.saveRemote();\r\n      //console.log(info);\r\n      list.push({\r\n        \"state\": \"SUCCESS\",\r\n        \"url\": info.url,\r\n        \"size\": 431521,\r\n        \"title\": info.title,\r\n        \"original\": info.original,\r\n        \"source\": imgUrl\r\n      });\r\n    }\r\n    //console.log(think.isEmpty(list));\r\n    return {\r\n      state: !think.isEmpty(list) ? 'SUCCESS' : 'ERROR',\r\n      list: list\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取已上传的文件列表\r\n   */\r\n  uploadlist() {\r\n    var allowFiles, listSize, path;\r\n    //判断类型\r\n    switch (this.get(\"action\")) {\r\n      //列出文件\r\n      case 'listfile':\r\n        allowFiles = this.config['fileManagerAllowFiles'];\r\n        listSize = this.config['fileManagerListSize'];\r\n        path = this.config['fileManagerListPath'];\r\n        break;\r\n      //列出图片\r\n      case 'listimage':\r\n      default:\r\n        allowFiles = this.config['imageManagerAllowFiles'];\r\n        listSize = this.config['imageManagerListSize'];\r\n        path = this.config['imageManagerListPath'];\r\n    }\r\n    //allowFiles = allowFiles.join(\"\").replace(/[.]/g,\"|\").substr(1);\r\n    /* 获取参数 */\r\n    var size = this.get('size') ? this.get('size') : listSize;\r\n    var start = this.get('start') ? this.get('start') : 0;\r\n    var end = parseInt(size) + parseInt(start);\r\n    /* 获取文件列表 */\r\n    path = path.substr(0, path.lastIndexOf(\"/\"));\r\n    var files = this.scanFolder(path).files;\r\n    if (files.length == 0) {\r\n      return {\r\n        \"state\": \"no match file\",\r\n        \"list\": [],\r\n        \"start\": start,\r\n        \"total\": files.length\r\n      }\r\n    }\r\n    /* 获取指定范围的列表 */\r\n    var len = files.length;\r\n    var files_n = [];\r\n    for (let i = 0; i < len; i++) {\r\n      var t = files[i].substr(files[i].lastIndexOf(\".\")).toLocaleLowerCase();\r\n      if (allowFiles.includes(t)) {\r\n        files_n.push(files[i])\r\n      }\r\n    }\r\n\r\n    var lenn = files_n.length;\r\n    for (let i = Math.min(end, lenn) - 1, list = []; i < lenn && i >= 0 && i >= start; i--) {\r\n      var f = files_n[i];\r\n      list.push({url: f});\r\n    }\r\n\r\n    return {\r\n      \"state\": \"SUCCESS\",\r\n      \"list\": list,\r\n      \"start\": start,\r\n      \"total\": files.length\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   * 遍历获取目录下的指定类型的文件\r\n   */\r\n  scanFolder(path) {\r\n    var fileList = [],\r\n      folderList = [],\r\n      walk = function (path, fileList, folderList) {\r\n        let files = fs.readdirSync(think.UPLOAD_PATH + \"/\" + path);\r\n        files.forEach(function (item) {\r\n          var tmpPath = path + '/' + item,\r\n            stats = fs.statSync(think.UPLOAD_PATH + \"/\" + tmpPath);\r\n\r\n          if (stats.isDirectory()) {\r\n            walk(tmpPath, fileList, folderList);\r\n            folderList.push(tmpPath);\r\n          } else {\r\n            fileList.push(tmpPath);\r\n          }\r\n        });\r\n      };\r\n\r\n    walk(path, fileList, folderList);\r\n\r\n    console.log('扫描' + path + '成功');\r\n\r\n    return {\r\n      'files': fileList,\r\n      'folders': folderList\r\n    }\r\n  }\r\n}\r\n"]}