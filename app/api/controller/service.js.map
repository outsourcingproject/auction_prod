{"version":3,"sources":["../../../src/api/controller/service.js"],"names":["Service","searchAction","keyword","param","segment","think","doSegment","simple","stripPunctuation","itemModel","model","join","field","select","allItems","result","map","item","titleHint","contentHint","i","name","split","length","desc","hintTimes","filter","sort","x","y","createAt","success","testAction","session","test","config","set","json"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,O;;;;;;;;oBAEbC,Y;;;;;;;AACAC,qB,GAAU,KAAKC,KAAL,CAAW,SAAX,C;AACVC,qB,GAAUC,MAAMD,OAAN,CAAcE,SAAd,CAAwBJ,OAAxB,EAAiC;AAC7CK,wBAAQ,IADqC;AAE7CC,kCAAkB;AAF2B,eAAjC,C;AAIVC,uB,GAAYJ,MAAMK,KAAN,CAAY,MAAZ,EAAoB,IAApB,EAA0B,KAA1B,C;;qBACKD,UAClBE,IADkB,CACb,uCADa,EAElBC,KAFkB,CAEZ,sIAFY,EAGlBC,MAHkB,E;;;AAAjBC,sB;AAIAC,oB,GAASD,SACVE,GADU,CACN,UAACC,IAAD,EAAS;AACZ,oBAAIC,YAAY,CAAhB;AACA,oBAAIC,cAAc,CAAlB;;AAEA,qCAAcf,OAAd,2HAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sBAAdgB,CAAc;;AACrBF,+BAAa,CAACD,KAAKI,IAAL,IAAa,EAAd,EAAkBC,KAAlB,CAAwBF,CAAxB,EAA2BG,MAA3B,GAAoC,CAAjD;AACAJ,iCAAe,CAACF,KAAKO,IAAL,IAAa,EAAd,EAAkBF,KAAlB,CAAwBF,CAAxB,EAA2BG,MAA3B,GAAoC,CAAnD;AACD;AACDN,qBAAKQ,SAAL,GAAiBP,YAAY,CAAZ,GAAgBC,WAAjC;AACA,uBAAOF,IAAP;AACD,eAXU,EAYVS,MAZU,CAYH,UAACN,CAAD;AAAA,uBAAKA,EAAEK,SAAP;AAAA,eAZG,EAaVE,IAbU,CAaL,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAAQA,EAAEJ,SAAF,GAAcG,EAAEH,SAAhB,IAA6B,CAACI,EAAEC,QAAH,GAAc,CAACF,EAAEE,QAAtD;AAAA,eAbK,C;+CAcN,KAAKC,OAAL,CAAahB,MAAb,C;;;;;;;;;;;;;;;;;oBAGHiB,U;;;;;;;;qBACE,KAAKC,OAAL,CAAa,MAAb,EAAqB,EAACC,MAAM,IAAP,EAArB,C;;;AACFC,oB,GAAS9B,MAAMK,KAAN,CAAY,QAAZ,EAAsB,IAAtB,EAA4B,KAA5B,C;;qBACPyB,OAAOC,GAAP,CAAW,yBAAX,EAAsC,CAAC,EAAC,KAAK,EAAN,EAAD,EAAY,EAAC,QAAQ,GAAT,EAAZ,EAA2B,EAAC,QAAQ,GAAT,EAA3B,CAAtC,C;;;6BAEC,I;;qBAAgB,KAAKH,OAAL,CAAa,MAAb,C;;;;6DAAXI,I;;;;;;;;;;;;;;;;;;;;kBAnCKrC,O","file":"service.js","sourcesContent":["import Base from './base';\r\nimport path from 'path';\r\n\r\nexport default class Service extends Base {\r\n\r\n  async searchAction() {\r\n    let keyword = this.param('keyword');\r\n    let segment = think.segment.doSegment(keyword, {\r\n      simple: true,\r\n      stripPunctuation: true\r\n    });\r\n    let itemModel = think.model('item', null, 'api');\r\n    let allItems = await itemModel\r\n      .join(\"item_type on item.type = item_type.id\")\r\n      .field(\"item.id as id, currentPrice, item.name as name, followCount, auctionEndTime, image, item_type.name as type,item.createAt as createAt\")\r\n      .select();\r\n    let result = allItems\r\n      .map((item)=> {\r\n        let titleHint = 0;\r\n        let contentHint = 0;\r\n\r\n        for (let i of segment) {\r\n          titleHint += (item.name || '').split(i).length - 1;\r\n          contentHint += (item.desc || '').split(i).length - 1;\r\n        }\r\n        item.hintTimes = titleHint * 2 + contentHint;\r\n        return item;\r\n      })\r\n      .filter((i)=>i.hintTimes)\r\n      .sort((x, y)=>y.hintTimes - x.hintTimes || +y.createAt - +x.createAt);\r\n    return this.success(result);\r\n  }\r\n\r\n  async testAction() {\r\n    await this.session('test', {test: 'ok'});\r\n    let config = think.model('config', null, 'api');\r\n    await config.set('auction.bid_increasment', [{'0': 50}, {'1000': 100}, {'5000': 200}]);\r\n\r\n    return this.json(await this.session('test'));\r\n  }\r\n}"]}