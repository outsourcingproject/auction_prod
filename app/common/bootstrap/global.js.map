{"version":3,"sources":["../../../src/common/bootstrap/global.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;AAKA;;;;;;;;AAQA;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA;AACA,IAAI,UAAU,IAAI,OAAJ,EAAd;AACA;AACA,QAAQ,UAAR;;AAGA,IAAI;AAAA,wEAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGd,8BAHc,GAGO,MAAM,MAAN,CAAa,yBAAb,CAHP;AAId,0BAJc,GAIG,MAAM,KAAN,CAAY,WAAZ,EAAyB,IAAzB,EAA+B,KAA/B,CAJH;AAAA,wBAMI,kBANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAMT,qBANS;AAAA;AAAA,mBAOG,eAAe,KAAf,CAAqB,EAAC,MAAM,UAAU,IAAjB,EAArB,EAA6C,IAA7C,EAPH;;AAAA;AAOZ,kBAPY;;AAAA,iBAQZ,MAAM,OAAN,CAAc,MAAd,CARY;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASR,eAAe,YAAf,CAA4B,UAAU,IAAtC,EAA4C,UAAU,IAAtD,EAA4D,UAAU,KAAtE,CATQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAJ;AAaA,IAAI;AAAA,yEAAW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGT,wBAHS,GAGM,MAAM,MAAN,CAAa,mBAAb,CAHN;AAIT,qBAJS,GAIG,MAAM,KAAN,CAAY,MAAZ,EAAoB,IAApB,EAA0B,KAA1B,CAJH;AAAA,yBAMI,YANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAMJ,gBANI;AAAA;AAAA,mBAOQ,UAAU,KAAV,CAAgB,EAAC,MAAM,KAAK,IAAZ,EAAhB,EAAmC,IAAnC,EAPR;;AAAA;AAOP,kBAPO;;AAAA,iBAQP,MAAM,OAAN,CAAc,MAAd,CARO;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASH,UAAU,OAAV,CAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,MAA7C,EAAqD,KAAK,WAA1D,CATG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAcA,MAAM,cAAN,GAAuB,UAAC,MAAD,EAAW;AAChC,SAAO,MAAM,QAAN,CAAe,MAAf,KAA0B,OAAO,KAAP,CAAa,eAAb,CAAjC;AACD,CAFD;AAGA,MAAM,OAAN,GAAgB,OAAhB;;AAEA;AACA;AACA,WAAW,IAAX;;AAEA,OAAO,aAAP,GAAuB,UAAC,GAAD,EAAQ;AAC7B,SAAO,IAAI,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,CAAP,CAD6B,CACM;AACpC,CAFD;;AAIA,OAAO,YAAP,8DAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB,mBADgB,GACJ,MAAM,KAAN,CAAY,MAAZ,EAAoB,IAApB,EAA0B,KAA1B,CADI;AAAA;AAAA,iBAEd,UAAU,WAAV,EAFc;;AAAA;AAAA;AAAA,iBAGd,UAAU,oBAAV,EAHc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAMA,eAAe,IAAf","file":"global.js","sourcesContent":["/**\n * this file will be loaded before server started\n * you can define global functions used in controllers, models, templates\n */\n\n/**\n * use global.xxx to define global functions\n *\n * global.fn1 = function(){\n *     \n * }\n */\n\n// 载入模块\nvar Segment = require('segment');\n// 创建实例\nvar segment = new Segment();\n// 使用默认的识别模块及字典，载入字典文件需要1秒，仅初始化时执行一次即可\nsegment.useDefault();\n\n\nlet initAuthority = async()=> {\n  \"use strict\";\n\n  let defaultAuthorities = think.config('site.defaultAuthorities');\n  let authorityModel = think.model('authority', null, 'api');\n\n  for (let authority of defaultAuthorities) {\n    let result = await authorityModel.where({name: authority.name}).find();\n    if (think.isEmpty(result)) {\n      await authorityModel.addAuthority(authority.name, authority.desc, authority.paths);\n    }\n  }\n};\nlet initRole = async()=> {\n  \"use strict\";\n\n  let defaultRoles = think.config('site.defaultRoles');\n  let roleModel = think.model('role', null, 'api');\n\n  for (let role of defaultRoles) {\n    let result = await roleModel.where({name: role.name}).find();\n    if (think.isEmpty(result)) {\n      await roleModel.addRole(role.name, role.desc, role.extend, role.authorities);\n    }\n  }\n};\n\nthink.isStringExpReg = (string)=> {\n  return think.isRegExp(string) || string.match(/^\\/[\\w\\W]+\\/$/);\n};\nthink.segment = segment;\n\n//Promise.all([initAuthority(), initRole()]).then();\n//initAuthority().then();\ninitRole().then();\n\nglobal.removeHTMLTag = (str)=> {\n  return str.replace(/<[^>]+>/g, \"\");//去掉所有的html标记\n};\n\nglobal.checkAuction = async() => {\n  let itemModel = think.model(\"item\", null, \"api\");\n  await itemModel.checkStatus();\n  await itemModel.initCheckStatusTimer();\n};\n\ncheckAuction().then();"]}