{"version":3,"sources":["../../../src/common/controller/error.js"],"names":["displayErrorPage","status","errorConfig","config","message","http","error","isJsonp","jsonp","key","msg","isAjax","fail","module","think","mode","mode_module","file","options","extend","type","display","_400Action","_403Action","_404Action","_500Action","_503Action","controller","base"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIE;;;;;mBAKAA,gB,6BAAiBC,M,EAAO;;AAEtB,QAAIC,cAAc,KAAKC,MAAL,CAAY,OAAZ,CAAlB;AACA,QAAIC,UAAU,KAAKC,IAAL,CAAUC,KAAV,IAAmB,KAAKD,IAAL,CAAUC,KAAV,CAAgBF,OAAnC,IAA8C,OAA5D;AACA,QAAG,KAAKG,OAAL,EAAH,EAAkB;AAAA;;AAChB,aAAO,KAAKC,KAAL,sBACJN,YAAYO,GADR,IACcR,MADd,SAEJC,YAAYQ,GAFR,IAEcN,OAFd,UAAP;AAID,KALD,MAKM,IAAG,KAAKO,MAAL,EAAH,EAAiB;AACrB,aAAO,KAAKC,IAAL,CAAUX,MAAV,EAAkBG,OAAlB,CAAP;AACD;;AAED,QAAIS,SAAS,QAAb;AACA,QAAGC,MAAMC,IAAN,KAAeD,MAAME,WAAxB,EAAoC;AAClCH,eAAS,KAAKV,MAAL,CAAY,gBAAZ,CAAT;AACD;AACD,QAAIc,OAAUJ,MAAV,eAA0BZ,MAA1B,UAAJ;AACA,QAAIiB,UAAU,KAAKf,MAAL,CAAY,KAAZ,CAAd;AACAe,cAAUJ,MAAMK,MAAN,CAAa,EAAb,EAAiBD,OAAjB,EAA0B,EAACE,MAAM,KAAP,EAA1B,CAAV;AACA,WAAO,KAAKC,OAAL,CAAaJ,IAAb,EAAmBC,OAAnB,CAAP;AACD,G;AACD;;;;;;mBAIAI,U,yBAAY;AACV,WAAO,KAAKtB,gBAAL,CAAsB,GAAtB,CAAP;AACD,G;AACD;;;;;;mBAIAuB,U,yBAAY;AACV,WAAO,KAAKvB,gBAAL,CAAsB,GAAtB,CAAP;AACD,G;AACD;;;;;;mBAIAwB,U,yBAAY;AACV,WAAO,KAAKxB,gBAAL,CAAsB,GAAtB,CAAP;AACD,G;AACD;;;;;;mBAIAyB,U,yBAAY;AACV,WAAO,KAAKzB,gBAAL,CAAsB,GAAtB,CAAP;AACD,G;AACD;;;;;;mBAIA0B,U,yBAAY;AACV,WAAO,KAAK1B,gBAAL,CAAsB,GAAtB,CAAP;AACD,G;;;EA9D0Bc,MAAMa,UAAN,CAAiBC,I","file":"error.js","sourcesContent":["'use strict';\r\n/**\r\n * error controller\r\n */\r\nexport default class extends think.controller.base {\r\n  /**\r\n   * display error page\r\n   * @param  {Number} status []\r\n   * @return {Promise}        []\r\n   */\r\n  displayErrorPage(status){\r\n\r\n    let errorConfig = this.config('error');\r\n    let message = this.http.error && this.http.error.message || 'error';\r\n    if(this.isJsonp()){\r\n      return this.jsonp({\r\n        [errorConfig.key]: status,\r\n        [errorConfig.msg]: message\r\n      })\r\n    }else if(this.isAjax()){\r\n      return this.fail(status, message);\r\n    }\r\n\r\n    let module = 'common';\r\n    if(think.mode !== think.mode_module){\r\n      module = this.config('default_module');\r\n    }\r\n    let file = `${module}/error/${status}.html`;\r\n    let options = this.config('tpl');\r\n    options = think.extend({}, options, {type: 'ejs'});\r\n    return this.display(file, options);\r\n  }\r\n  /**\r\n   * Bad Request \r\n   * @return {Promise} []\r\n   */\r\n  _400Action(){\r\n    return this.displayErrorPage(400);\r\n  }\r\n  /**\r\n   * Forbidden \r\n   * @return {Promise} []\r\n   */\r\n  _403Action(){\r\n    return this.displayErrorPage(403);\r\n  }\r\n  /**\r\n   * Not Found \r\n   * @return {Promise}      []\r\n   */\r\n  _404Action(){\r\n    return this.displayErrorPage(404);\r\n  }\r\n  /**\r\n   * Internal Server Error\r\n   * @return {Promise}      []\r\n   */\r\n  _500Action(){\r\n    return this.displayErrorPage(500);\r\n  }\r\n  /**\r\n   * Service Unavailable\r\n   * @return {Promise}      []\r\n   */\r\n  _503Action(){\r\n    return this.displayErrorPage(503);\r\n  }\r\n}"]}