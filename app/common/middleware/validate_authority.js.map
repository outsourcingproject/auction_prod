{"version":3,"sources":["../../../src/common/middleware/validate_authority.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IAAqB,iB;;;;;;;;8BACnB,I,mBAAc;AAAA;;AAAA,sCAAN,IAAM;AAAN,UAAM;AAAA;;AACZ,8DAAM,IAAN,mDAAc,IAAd;AACA,SAAK,SAAL,GAAiB,MAAM,KAAN,CAAY,MAAZ,EAAoB,SAApB,EAA+B,MAA/B,CAAjB;AACA,SAAK,SAAL,GAAiB,MAAM,KAAN,CAAY,MAAZ,EAAoB,SAApB,EAA+B,MAA/B,CAAjB;AACD,G;;8BAEK,G;;;;;;;AACA,sB,GAAW,KAAK,IAAL,CAAU,Q;;qBACR,KAAK,IAAL,CAAU,OAAV,CAAkB,MAAlB,C;;;AAAb,kB;;qBAEoB,KAAK,IAAL,CAAU,OAAV,CAAkB,aAAlB,C;;;AAApB,yB;;oBAGA,CAAC,WAAD,IAAgB,MAAM,OAAN,CAAc,WAAd,C;;;;;mBACd,I;;;;;;qBAEkB,KAAK,SAAL,CAAe,kBAAf,CAAkC,KAAK,QAAvC,C;;;AAApB,yB;;;;;;qBAIoB,KAAK,SAAL,CAAe,kBAAf,CAAkC,WAAlC,C;;;AAApB,yB;;;;qBAEI,KAAK,IAAL,CAAU,OAAV,CAAkB,aAAlB,EAAiC,WAAjC,C;;;kBAGH,KAAK,SAAL,CAAe,QAAf,EAAyB,WAAzB,C;;;;;;qBACG,KAAK,IAAL,CAAU,IAAV,CAAe,cAAf,C;;;AACN,mBAAK,IAAL,CAAU,GAAV;+CACO,MAAM,OAAN,E;;;;;;;;;;;;;;;;;AAIX;;;8BACA,S,sBAAU,Q,EAAU,W,EAAa;AAC/B,QAAI,YAAY,KAAhB;AACA,gBAAY,OAAZ,CAAoB,UAAC,CAAD,EAAM;AACxB,QAAE,KAAF,CAAQ,OAAR,CAAgB,UAAC,CAAD,EAAM;;AAEpB,YAAI,MAAM,cAAN,CAAqB,CAArB,CAAJ,EAA6B;AAC3B;AACA,cAAE,KAAK,CAAL,CAAF;AACA,cAAI,SAAS,KAAT,CAAe,CAAf,CAAJ,EAAuB;AACrB,wBAAY,IAAZ;AACD;AACF,SAND,MAMO;AACL,cAAI,KAAK,QAAT,EAAmB;AACjB,wBAAY,IAAZ;AACD;AACF;AACF,OAbD;AAcD,KAfD;;AAiBA,WAAO,SAAP;AACD,G;;;EAtD4C,MAAM,UAAN,CAAiB,I;;kBAA3C,iB","file":"validate_authority.js","sourcesContent":["export default class ValidateAuthority extends think.middleware.base {\n  init(...args) {\n    super.init(...args);\n    this.userModel = think.model('user', undefined, 'home');\n    this.roleModel = think.model('role', undefined, 'home');\n  }\n\n  async run() {\n    let pathname = this.http.pathname;\n    let user = await this.http.session('user');\n\n    let authorities = await this.http.session('authorities');\n\n\n    if (!authorities || think.isEmpty(authorities)) {\n      if (user) {\n        //已登录\n        authorities = await this.userModel.getUserAuthorities(user.username);\n\n      } else {\n        //未登录\n        authorities = await this.roleModel.getRoleAuthorities('anonymous');\n      }\n      await this.http.session('authorities', authorities);\n    }\n\n    if (!this._validate(pathname, authorities)) {\n      await this.http.fail('NO_AUTHORITY');\n      this.http.end();\n      return think.prevent();\n    }\n  }\n\n  //基于URL的权限验证实现主方法\n  _validate(pathname, authorities) {\n    let validated = false;\n    authorities.forEach((i)=> {\n      i.paths.forEach((o)=> {\n\n        if (think.isStringExpReg(o)) {\n          //string to RegExp\n          o=eval(o);\n          if (pathname.match(o)) {\n            validated = true;\n          }\n        } else {\n          if (o == pathname) {\n            validated = true;\n          }\n        }\n      });\n    });\n\n    return validated;\n  }\n}"]}