{"version":3,"sources":["../../../src/common/middleware/validate_authority.js"],"names":["ValidateAuthority","init","args","userModel","think","model","undefined","roleModel","run","pathname","http","session","user","authorities","isEmpty","getUserAuthorities","username","getRoleAuthorities","_validate","fail","end","prevent","validated","forEach","i","paths","o","isStringExpReg","eval","match","middleware","base"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IAAqBA,iB;;;;;;;;8BACnBC,I,mBAAc;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACZ,8DAAMD,IAAN,mDAAcC,IAAd;AACA,SAAKC,SAAL,GAAiBC,MAAMC,KAAN,CAAY,MAAZ,EAAoBC,SAApB,EAA+B,MAA/B,CAAjB;AACA,SAAKC,SAAL,GAAiBH,MAAMC,KAAN,CAAY,MAAZ,EAAoBC,SAApB,EAA+B,MAA/B,CAAjB;AACD,G;;8BAEKE,G;;;;;;;AACAC,sB,GAAW,KAAKC,IAAL,CAAUD,Q;;qBACR,KAAKC,IAAL,CAAUC,OAAV,CAAkB,MAAlB,C;;;AAAbC,kB;;qBAEoB,KAAKF,IAAL,CAAUC,OAAV,CAAkB,aAAlB,C;;;AAApBE,yB;;oBAGA,CAACA,WAAD,IAAgBT,MAAMU,OAAN,CAAcD,WAAd,C;;;;;mBACdD,I;;;;;;qBAEkB,KAAKT,SAAL,CAAeY,kBAAf,CAAkCH,KAAKI,QAAvC,C;;;AAApBH,yB;;;;;;qBAIoB,KAAKN,SAAL,CAAeU,kBAAf,CAAkC,WAAlC,C;;;AAApBJ,yB;;;;qBAEI,KAAKH,IAAL,CAAUC,OAAV,CAAkB,aAAlB,EAAiCE,WAAjC,C;;;kBAGH,KAAKK,SAAL,CAAeT,QAAf,EAAyBI,WAAzB,C;;;;;;qBACG,KAAKH,IAAL,CAAUS,IAAV,CAAe,cAAf,C;;;AACN,mBAAKT,IAAL,CAAUU,GAAV;+CACOhB,MAAMiB,OAAN,E;;;;;;;;;;;;;;;;;AAIX;;;8BACAH,S,sBAAUT,Q,EAAUI,W,EAAa;AAC/B,QAAIS,YAAY,KAAhB;AACAT,gBAAYU,OAAZ,CAAoB,UAACC,CAAD,EAAM;AACxBA,QAAEC,KAAF,CAAQF,OAAR,CAAgB,UAACG,CAAD,EAAM;;AAEpB,YAAItB,MAAMuB,cAAN,CAAqBD,CAArB,CAAJ,EAA6B;AAC3B;AACAA,cAAEE,KAAKF,CAAL,CAAF;AACA,cAAIjB,SAASoB,KAAT,CAAeH,CAAf,CAAJ,EAAuB;AACrBJ,wBAAY,IAAZ;AACD;AACF,SAND,MAMO;AACL,cAAII,KAAKjB,QAAT,EAAmB;AACjBa,wBAAY,IAAZ;AACD;AACF;AACF,OAbD;AAcD,KAfD;;AAiBA,WAAOA,SAAP;AACD,G;;;EAtD4ClB,MAAM0B,UAAN,CAAiBC,I;;kBAA3C/B,iB","file":"validate_authority.js","sourcesContent":["export default class ValidateAuthority extends think.middleware.base {\r\n  init(...args) {\r\n    super.init(...args);\r\n    this.userModel = think.model('user', undefined, 'home');\r\n    this.roleModel = think.model('role', undefined, 'home');\r\n  }\r\n\r\n  async run() {\r\n    let pathname = this.http.pathname;\r\n    let user = await this.http.session('user');\r\n\r\n    let authorities = await this.http.session('authorities');\r\n\r\n\r\n    if (!authorities || think.isEmpty(authorities)) {\r\n      if (user) {\r\n        //已登录\r\n        authorities = await this.userModel.getUserAuthorities(user.username);\r\n\r\n      } else {\r\n        //未登录\r\n        authorities = await this.roleModel.getRoleAuthorities('anonymous');\r\n      }\r\n      await this.http.session('authorities', authorities);\r\n    }\r\n\r\n    if (!this._validate(pathname, authorities)) {\r\n      await this.http.fail('NO_AUTHORITY');\r\n      this.http.end();\r\n      return think.prevent();\r\n    }\r\n  }\r\n\r\n  //基于URL的权限验证实现主方法\r\n  _validate(pathname, authorities) {\r\n    let validated = false;\r\n    authorities.forEach((i)=> {\r\n      i.paths.forEach((o)=> {\r\n\r\n        if (think.isStringExpReg(o)) {\r\n          //string to RegExp\r\n          o=eval(o);\r\n          if (pathname.match(o)) {\r\n            validated = true;\r\n          }\r\n        } else {\r\n          if (o == pathname) {\r\n            validated = true;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    return validated;\r\n  }\r\n}"]}